/*
 * File: app/store/TypesJsonStore.js
 * Date: Thu Feb 09 2012 16:52:45 GMT+0400 (Ìîñêîâñêîå âðåìÿ (çèìà))
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be auto-generated each and everytime you export.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PetroRes.store.TypesJsonStore', {
    extend: 'Ext.data.Store',

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            autoLoad: true,
            autoSync: true,
            storeId: 'TypesJsonStore',
            //buffered: true,
            pageSize: 65535,
            remoteSort: true,
            proxy: {
                type: 'ajax',
                url: 'rest/types',
                headers: {
                    Accept: 'application/json'
                },
                reader: {
                    type: 'json',
                    idProperty: 'id',
                    root: 'types'
                }
            },
            /*associations:[
                {
                    type: 'hasOne',
                    model: Ext.getStore('SuperTypesJsonStore').getProxy().getModel(),  
                    name: 'superType'
                }
            ],*/
            fields: [
                {
                    name: 'id',
                    type: 'int'
                },
                {
                    name: 'name'
                },
                {
                    name: 'isMultiFile'
                },
                {
                    name: 'isGeo',
                    type: 'boolean'                    
                },
                {
                    name: 'superType'
                },
                {
                    name: 'typeExt'
                }
            ],
            
            copyStore: function (){
                var records = [];
                var newStore = new Ext.data.Store(
                    {
                        model : me.model
                    });
                me.each(
                    function (r)
                    {
                        records.push (r.copy());
                    });

                newStore.loadRecords(records);
                //newStore.filter(me.filters.getRange());
                return newStore;
            }            
        }, cfg)]);
    }
    
    
});