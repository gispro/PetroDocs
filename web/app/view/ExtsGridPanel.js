/*
 * File: app/view/ExtsGridPanel.js
 * Date: Thu Jan 26 2012 18:09:16 GMT+0400 (Ìîñêîâñêîå âðåìÿ (çèìà))
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('PetroRes.view.ExtsGridPanel', {
    extend: 'PetroRes.view.ui.ExtsGridPanel',

    initComponent: function() {
        var me = this;
        me.callParent(arguments);
        
        var proxy = me.store.getProxy();
        
        Ext.apply(proxy.actionMethods, {
            update: 'PUT',
            create: 'POST',
            destroy: 'DELETE'
        });
        
        var oldWrite = proxy.writer.write;
        proxy.writer.write = function(request){
            if(request.action === 'destroy' && request.records.length == 1){
                var quotePos = request.url.indexOf('?');
                request.url = 
                    request.url.substring(0, quotePos) + "/" + request.records[0].get('ext') + 
                    request.url.substring(quotePos);
            }
            var ret = oldWrite.call(proxy.writer, request);
            return ret;
        };

        me.addButton = me.dockedItems.getByKey('pagingToolBar').items.getByKey('addButton')
        
        me.headerCt.insert(0, {
            xtype:'actioncolumn',
            flex:1,
            items: [{
                icon: 'lib/ext41/examples/restful/images/delete.png',
                tooltip: 'Delete',
                handler: function(grid, rowIndex, colIndex) {
                    grid.store.removeAt(rowIndex);
                }
            }/*, {
                icon: 'lib/ext41/examples/shared/icons/fam/cog_edit.png',
                tooltip: 'Edit',
                handler: function(grid, rowIndex, colIndex) {
                    grid.store.removeAt(rowIndex);
                }
            }*/]
        });

        for (var i in me.plugins){
            //alert();
            if(me.plugins[i]['$className']==='Ext.grid.plugin.RowEditing'){
                me.editorPlugin = me.plugins[i];
                me.editorPlugin.on('canceledit', function(){
                    if(me.editorPlugin.startedPetroObjectAdd == true){
                        me.store.autoSync = false;
                        me.editorPlugin.startedPetroObjectAdd = false;
                        me.store.removeAt(0);
                        me.store.autoSync = true;
                    }
                });
                me.addButton.on('click', function(){
                    me.editorPlugin.cancelEdit();
                    me.store.autoSync = false;

                    me.store.insert(0, {});
                    me.editorPlugin.startEdit(0, 0);            
                    me.editorPlugin.startedPetroObjectAdd = true;            
                    me.store.autoSync = true;
                });
                
                break;
            }
        }

        proxy.afterRequest = function(request){
            if(request.action === 'create' && request.records.length==1){
                var uriCame = request.operation.response.getResponseHeader('location');
                if(uriCame){
                    me.store.autoSync = false;
                    var ch = uriCame.indexOf('?');
                    var uri;
                    if(ch>=0)
                        uri = uriCame.substring(0, ch);
                    else
                        uri = uriCame;
                    if(uri.charAt(uri.length-1)==='/')
                        uri = uri.substring(0, uri.length-1);
                    var ext = uri.substring(uri.lastIndexOf('/')+1);

                    //request.records[0].set('uri', uriCame);
                    request.records[0].set('ext', ext);
                    request.records[0].modified.ext = undefined;
                    request.records[0].dirty = false;
                    
                    me.store.autoSync = true;
                }
            }
        };
    }
});
