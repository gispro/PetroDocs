/*
 * File: app/view/MainWindow.js
 * Date: Tue Jan 31 2012 14:44:12 GMT+0400 (Ìîñêîâñêîå âðåìÿ (çèìà))
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */


Ext.define('PetroRes.view.MainWindow', {
    extend: 'PetroRes.view.ui.MainWindow',
    
    closable: false,
    title: 'Petroresource Documents System',
    maximizable: false,
    maximized: true,
    resizable: false,
    height:Ext.getBody().getViewSize().height*0.5,
    width:Ext.getBody().getViewSize().width*0.5,
    layout: 'fit',
    id: 'MainWindow',
    
    openPetroWindows: {},
    openPetroWindowsXYcache: petroresConfig.windowsXY,
    openPetroWindow: function(handler, windowCfg){
        var me = Ext.getCmp('MainWindow');//this;// Ext.getCmp('MainWindow');
        var body = me.getLayout().getElementTarget();
        if(me.openPetroWindowsXYcache[handler]){
            Ext.apply(windowCfg, me.openPetroWindowsXYcache[handler]);
        }
        Ext.applyIf(windowCfg, {
            constrain: true,
            height: (me.openPetroWindowsXYcache[handler]?me.openPetroWindowsXYcache[handler].height:body.getHeight()*0.5),
            width: (me.openPetroWindowsXYcache[handler]?me.openPetroWindowsXYcache[handler].width:body.getWidth()*0.5),
            //renderTo: body,
            draggable: true,
            floatable: true,
            x: (me.openPetroWindowsXYcache[handler]?me.openPetroWindowsXYcache[handler].x:undefined),
            y: (me.openPetroWindowsXYcache[handler]?me.openPetroWindowsXYcache[handler].y:undefined),
            listeners: {
                close: function(){
                    me.openPetroWindowsXYcache[handler] = {x: wnd.x, y: wnd.y, width: wnd.width, height: wnd.height};
                    var ddd = new Date();
                    ddd = new Date(ddd.getTime() + 365 * 24 * 60 * 60 * 1000);
                    Ext.util.Cookies.set('windowsXY', encodeURI(Ext.JSON.encode(me.openPetroWindowsXYcache)), ddd);
                    me.remove(wnd);
                    delete me.openPetroWindows[handler];
                    return true;
                },
                move: function(){
                    me.openPetroWindowsXYcache[handler] = {x: wnd.x, y: wnd.y, width: wnd.width, height: wnd.height};
                    var ddd = new Date();
                    ddd = new Date(ddd.getTime() + 365 * 24 * 60 * 60 * 1000);
                    Ext.util.Cookies.set('windowsXY', encodeURI(Ext.JSON.encode(me.openPetroWindowsXYcache)), ddd);
                },
                resize: function(){
                    me.openPetroWindowsXYcache[handler] = {x: wnd.x, y: wnd.y, width: wnd.width, height: wnd.height};
                    var ddd = new Date();
                    ddd = new Date(ddd.getTime() + 365 * 24 * 60 * 60 * 1000);
                    Ext.util.Cookies.set('windowsXY', encodeURI(Ext.JSON.encode(me.openPetroWindowsXYcache)), ddd);
                }
            }
        });
        var wnd = me.openPetroWindows[handler] ||                         
            (me.openPetroWindows[handler] = 
            Ext.create('Ext.window.Window', windowCfg));
        me.add(wnd);
        wnd.show();
    },
    
    
    dockedItems: [
    {
        xtype: 'toolbar',
        dock: 'top',
        items: [
        {
            xtype: 'button',
            text: 'Document',
            menu: {
                xtype: 'menu',
                //width: 120,
                items: [
                {
                    xtype: 'menuitem',
                    text: 'Documents Catalog',
                    id: 'DocumentsCatalogMenuItem',
                    handler: function(){
                        var store = Ext.data.StoreManager.lookup('DocsViewDomainsJsonTreeStore');
                        if(!store)
                            Ext.create( 'PetroRes.store.DomainsJsonTreeStore', 
                                        {storeId:'DocsViewDomainsJsonTreeStore'});

                        var wnd = Ext.getCmp('MainWindow'),
                            pnlTree = Ext.create('PetroRes.view.DomainsTreePanel',
                                                 {editable:false, store:'DocsViewDomainsJsonTreeStore'}),
                            pnlDocumentsGreed = Ext.create('PetroRes.view.DomainDocumentsGridPanel',{region:'center', domainsTree: pnlTree}),
                            pnlAddDocument = Ext.create('PetroRes.view.DomainDocumentsAddPanel',{region:'center', docsGreed:pnlDocumentsGreed});
                            
                            pnlAddDocument.addListener('documentadded',
                                                        function(p1, p2){
                                                            var ddStore = Ext.data.StoreManager.lookup('DomainDocumentsJsonStore'),
                                                                raw = this.getTemplateDomain();
                                                            ddStore.loadDocuments(raw.id, raw.level, raw.name, raw.fullName);
                                                        },
                                                        pnlAddDocument);
                            pnlAddDocument.addListener('documentdeleted',
                                                        function(p1, p2){
                                                            var ddStore = Ext.data.StoreManager.lookup('DomainDocumentsJsonStore'),
                                                                raw = this.getTemplateDomain();
                                                            ddStore.loadDocuments(raw.id, raw.level, raw.name, raw.fullName);
                                                        },
                                                        pnlAddDocument);
                            Ext.apply(pnlTree,{region: 'west', collapsible: true, split: true, width: wnd.getWidth()*0.3});
                            pnlTree.addListener('select', 
                                                function( selRowModel, record, index, eOpts ){
                                                    //Ext.selection.RowModel this, Ext.data.Model record, Number index, Object eOpts
                                                    pnlAddDocument.setTemplateDomain(record);
                                                     //tf.labelEl.update(record.raw.name+': ');
                                                    var ddStore = Ext.data.StoreManager.lookup('DomainDocumentsJsonStore');
                                                    ddStore.loadDocuments(record.raw.id, record.raw.level, record.raw.name, record.raw.fullName);
                                                });
                             pnlDocumentsGreed.addListener('select',
                                                                    //( Ext.selection.RowModel this, Ext.data.Model record, Number index, Object eOpts){
                                                            function( selRowModel, record, index, eOpts){
                                                                pnlAddDocument.setTemplateDocument(record);
                                                            });
                                                            
                                var btnFind = Ext.create('Ext.Button', 
                                {icon:'lib/ext41/examples/ux/grid/images/find.png',
                                    region: 'west',
                                    height:24,
                                    listeners: {
                                        afterRender: function(c, options){
                                        c.findTooltip = Ext.create('Ext.tip.ToolTip', 
                                          {target: c.getEl(),
                                              anchor: 'top',
                                              autoHide: false,
                                              closable: true,
                                              width:200,
                                              height:52,
                                              layout:'fit',
                                              items:[
                                                  Ext.create('PetroRes.view.DocumentSimpleSearchPanel')
                                              ]});
                                          },
                                          click:function(c){
                                              if(c.findTooltip.isVisible())
                                                c.findTooltip.hide();
                                              else
                                                c.findTooltip.show();  
                                          }
                                        }} );
//                                        me.on({hide:  function(){ if( c.findTooltip.isVisible()) c.findTooltip.hide()},
//                                               move:  function(){ if( c.findTooltip.isVisible()) c.findTooltip.hide()},
//                                               resize:function(){ if( c.findTooltip.isVisible()) c.findTooltip.hide()}});
                        var w = wnd.openPetroWindow('domaindocuments', {
                            closable: true,
                            width:wnd.getWidth()*0.9,
                            //height:wnd.getHeight()*0.7,
                            title: 'Documents Catalog',
                            maximizable: true,
                            maximized: false,
                            layout: 'border',//'fit',
                            items: [
                                {xtype:'panel', layout:'border', region:'north', height:27,
                                  items:[
                                        btnFind,
                                        pnlAddDocument
                                        //Ext.create('PetroRes.view.DocumentSimpleSearchPanel',{region:'north', height:27}),
                                    ]},
                                {xtype:'panel', layout:'border', region:'center',
                                    items:[
                                        pnlTree,
                                        pnlDocumentsGreed
                                    ]}
                                //pnlTools,
                                //pnlTree,
                                //pnlDocumentsGreed
                            ]
                        });
                    }
                },
                {
                    xtype: 'menuitem',
                    text: 'Register',
                    id: 'RegisterDocumentsMenuItem',
                    handler: function(){
                        var wnd = Ext.getCmp('MainWindow');
                        wnd.openPetroWindow('newDoc', {
                            closable: true,
                            title: 'New Document',
                            maximizable: true,
                            maximized: true,
                            height:wnd.getHeight()*0.8,
                            width:wnd.getWidth()*0.8,
                            layout: 'fit',
                            items: [
                            Ext.create('PetroRes.view.DocumentForm')
                            ]
                        });
                    }
                },
                {
                    xtype: 'menuitem',
                    text: 'Find',
                    id: 'findDocMenuItem',
                    handler: function(){
                        var wnd = Ext.getCmp('MainWindow');
                        wnd.openPetroWindow('searchDoc', {
                            closable: true,
                            title: 'Find Document',
                            maximizable: true,
                            maximized: false,
                            width:wnd.getLayout().getElementTarget().getWidth()*0.326,
                            height:wnd.getLayout().getElementTarget().getHeight(),
                            x: 0,
                            y: 0,
                            layout: 'fit',
                            items: [
                                Ext.create('PetroRes.view.DocumentSearchForm')
                            ]
                        });
                        
                    }
                }                
                ]
            }
        },{
            xtype: 'button',
            text: 'Map',
            menu: {
                xtype: 'menu',
                id: 'mapMenus',
                items: petroresConfig.getMapMenus()
            }
        },
        petroresConfig.userIsAdmin ?
        {
            xtype: 'button',
            text: 'Options',
            menu: {
                xtype: 'menu',
                items: [
                {
                    text: 'Settings',
                    menu: {
                        xtype: 'menu',
                        items: [
                        {
                            xtype: 'menuitem',
                            text: 'Authors',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('authors', {
                                    closable: true,
                                    title: 'Authors',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.AuthorsGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Projects',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('sites', {
                                    closable: true,
                                    title: 'Projects',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.SitesGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Wells',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('wells', {
                                    closable: true,
                                    title: 'Wells',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.WellsGridPanel')
                                    ]
                                });
                            }//,
                        //scope: this
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Project Stages',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('stages', {
                                    closable: true,
                                    title: 'Project Stages',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.StagesGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Update Cycles',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('periodicities', {
                                    closable: true,
                                    title: 'Update Cycles',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.PeriodicitiesGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Classifications',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('classifications', {
                                    closable: true,
                                    title: 'Classifications',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.ClassificationsGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Organizations',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('organizations', {
                                    closable: true,
                                    title: 'Organizations',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.OrganizationsGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'General Types',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('supertypes', {
                                    closable: true,
                                    title: 'General Types',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.SuperTypesGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'File Types',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('filetypes', {
                                    closable: true,
                                    title: 'File Types',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.TypesGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Geo Data Types',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('geotypes', {
                                    closable: true,
                                    width:wnd.getWidth()*0.9,
                                    title: 'Geo Data Types',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.GeoTypesGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Types Of Work',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('typesOfWork', {
                                    closable: true,
                                    title: 'Types Of Work',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.TypesOfWorkGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Projections',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('projections', {
                                    closable: true,
                                    title: 'Projections',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.ProjectionsGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Work Processes',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                wnd.openPetroWindow('workProcesses', {
                                    closable: true,
                                    title: 'Work Processes',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                    Ext.create('PetroRes.view.WorkProcessesGridPanel')
                                    ]
                                });
                            }
                        },
                        {
                            xtype: 'menuitem',
                            text: 'Domains Tree',
                            handler: function(){
                                var wnd = Ext.getCmp('MainWindow');
                                var store = Ext.data.StoreManager.lookup('AdminDomainsJsonTreeStore');
                                if(!store)
                                    Ext.create( 'PetroRes.store.DomainsJsonTreeStore', 
                                                {storeId:'AdminDomainsJsonTreeStore'});

                                wnd.openPetroWindow('domains', {
                                    closable: true,
                                    width:wnd.getWidth()*0.9,
                                    title: 'Domains Tree',
                                    maximizable: true,
                                    maximized: false,
                                    layout: 'fit',
                                    items: [
                                        Ext.create('PetroRes.view.DomainsTreePanel', 
                                                    {editable:true, store:'AdminDomainsJsonTreeStore'})
                                    ]
                                });
                            }
                        } ]
                    }
                }
                ]
            }
        }:undefined
        , {
            xtype: 'button',
            text: 'Help',
            handler: function(){
                var wnd = Ext.getCmp('MainWindow');
                wnd.openPetroWindow('helpWindow', {
                    closable: true,
                    title: 'Help',
                    maximizable: true,
                    maximized: false,
                    layout: 'fit',
                    items: [
                    {
                        layout:'border',
                        defaults: {
                            collapsible: true,
                            split: true
                        },
                        items: [
                        {
                            xtype:'treepanel',
                            listeners: {
                                itemclick: function(a, b, c){
                                    //console.log (arguments);
                                    if(b.raw.url){
                                        Ext.getCmp('helpIframe').body.dom.innerHTML= 
                                            '<iframe style="border: none;" height="100%" width="100%" src="' + b.raw.url + '"></iframe>'
                                    }
                                }
                            },
                            rootVisible: false,
                            region:'west',
                            //margins: '5 0 0 0',
                            //cmargins: '5 5 0 0',
                            width: 175,
                            minSize: 100,
                            maxSize: 250,
                            useArrows:true,
                            autoScroll:true,
                            animate:true,
                            containerScroll: true,
                            border: false,
                            root: {
                                children: petroresConfig.helpInfo
                            }
                        },
                        {
                            collapsible: false,
                            region:'center',
                            margins: '5 0 0 0',
                            id: 'helpIframe'
                        }
                        ]
                    }
                    ]
                });
            }
        }
        
        , {
            xtype: 'button',
            tooltip: 'Find Documents',
            icon: 'images/edit-find-16-3.png',
            handler: function(){
                Ext.getCmp('findDocMenuItem').handler();
            }
        }        
        , {
            xtype: 'button',
            tooltip: 'Register',
            icon: 'images/edit.png',
            handler: function(){
                Ext.getCmp('RegisterDocumentsMenuItem').handler();
            }
        }        
        , {
            xtype: 'button',
            tooltip: 'Documents Catalog',
            icon: 'lib/ext41/resources/themes/images/default/tree/folder-open.gif',
            handler: function(){
                Ext.getCmp('DocumentsCatalogMenuItem').handler();
            }
        }        
        ]
    }
    ],
    initComponent: function() {
        var me = this;
        me.callParent(arguments);
    },
    listeners:{
        show: function(){
            //Ext.getCmp('MainMapMenuItem').handler();
            var me = this;
            me.openMap();
            Ext.getCmp('findDocMenuItem').handler();
        }
    }
    ,openMap: function(mapConf){
                        var mcfg = petroresConfig.layersCreator(mapConf);
                        if(!mapConf)
                            mapConf='';
                 
                        var layers = mcfg.layers;

                        var vectorLayers = [];  
                        var editableLayers = [];
                        for(var l in layers){
                            if(layers[l].CLASS_NAME == 'OpenLayers.Layer.Vector'){
                                vectorLayers.push(layers[l]);
                                //if(layers[l].editingPanel)
                                {
                                    editableLayers.push({
                                        name: layers[l].name,
                                        val: layers[l]
                                    })
                                }

                                layers[l].events.on({
                                    featureselected: function(sel) {
                                        wnd.openPetroWindows['geMapWindow' + mapConf].selectedFeatures[sel.feature.fid] = sel.feature;
                                        //console.log(wnd.openPetroWindows.mapWindow.selectedFeatures);
                                    },
                                    featureunselected: function(sel) {
                                        delete wnd.openPetroWindows['geMapWindow' + mapConf].selectedFeatures[sel.feature.fid];
                                        //console.log(wnd.openPetroWindows.mapWindow.selectedFeatures);
                                    }
                                });


                            };
                        }                        

                        var selectControl = new OpenLayers.Control.SelectFeature(vectorLayers, {
                                    clickout: false, toggle: true,
                                    multiple: false, hover: false,
                                    toggleKey: "ctrlKey", // ctrl key removes from selection
                                    multipleKey: "shiftKey", // shift key adds to selection
                                    box: true
                                    //,displayInLayerSwitcher: false
                                    ,eventListeners: {
                                        deactivate: function(){
                                            selectControl.unselectAll();
                                        }
                                    }
                                });

                        var selectControlHover = new OpenLayers.Control.SelectFeature(vectorLayers, {
                                    clickout: true, toggle: false,
                                    multiple: false, hover: false
                                    //,displayInLayerSwitcher: false
                                    ,eventListeners: {
                                        deactivate: function(){
                                            selectControlHover.unselectAll();
                                        }
                                    }
                                    , onUnselect: function(){
                                        selectControlHover.baloon.close();
                                    }
                                    , onSelect: function(selected){
                                        if(selectControlHover.baloon){
                                            selectControlHover.baloon.close();
                                        }
                                        var pix = mapPanel.map.getPixelFromLonLat(
                                            new OpenLayers.LonLat(selected.geometry.bounds.right, 
                                            selected.geometry.bounds.bottom));
                                        selectControlHover.baloon = Ext.create('Ext.window.Window', {
                                            title: 'Object Attributes',
                                            layout: 'fit',
                                            height: 300,
                                            width: 250,
                                            //x: pix.x,
                                            //y: pix.y,
                                            defaults:{
                                                anchor: '100%'
                                            },
                                            items: [{
                                                autoScroll: true,
                                                xtype: 'propertygrid',
                                                source: selected.data
                                            }],
                                            fbar: [{
                                                type: 'button',
                                                text: 'Documents',
                                                handler: function(){
                                                    Ext.Ajax.request({
                                                        headers: {
                                                            Accept: 'application/json'
                                                        },
                                                        url: 'rest/documents/find',
                                                        jsonData: {geoObjects: function(){
                                                            var obj = [];
                                                            var feat  = selected.fid
                                                            {
                                                                var oneFeatArr = feat.split('.');
                                                                obj.push({
                                                                    idInTable: oneFeatArr[1],
                                                                    tableName: oneFeatArr[0]
                                                                });
                                                            }
                                                            return obj;// Ext.encode(obj);
                                                        }.call()}
                                                        ,
                                                        success: function(resp, opts){
                                                            var ret = Ext.decode(resp.responseText);
                                                            //petroresConfig.makeAllIdsNumbers(ret);
                                                            //console.log(["вот, получилось", ret])

                                                            var wnd = Ext.getCmp('MainWindow');

                                                            var stor = Ext.create('Ext.data.Store', {
                                                                model: Ext.getStore('DocumentsJsonStore').getProxy().getModel(),
                                                                data: ret,
                                                                proxy: {
                                                                    type: 'memory',
                                                                    reader: {
                                                                        type: 'json',
                                                                        root: 'documents'
                                                                    }
                                                                }
                                                            });
                                                            var grid = Ext.create(
                                                                'PetroRes.view.DocumentsGridPanel', 
                                                                {
                                                                    store: stor,
                                                                    listeners:{
                                                                        itemdblclick: function(ths, rec){

                                                                            var editForm = Ext.create(
                                                                                    'PetroRes.view.DocumentFormEdit'
                                                                                );
                                                                            wnd.openPetroWindow('editDoc', {
                                                                                closable: true,
                                                                                width:wnd.getWidth()*0.9,
                                                                                title: 'Edit Document',
                                                                                maximizable: true,
                                                                                maximized: true,
                                                                                layout: 'fit',
                                                                                items: [
                                                                                    editForm
                                                                                ]                                    
                                                                            });
                                                                            editForm.loadRecord(rec);
                                                                        }
                                                                    }
                                                                }
                                                            );
                                                            if(wnd.openPetroWindows.searchres){
                                                                wnd.openPetroWindows.searchres.close();
                                                            }
                                                            wnd.openPetroWindow('searchres', {
                                                                closable: true,
                                                                width:wnd.getWidth()*0.9,
                                                                title: 'Found Documents',
                                                                maximizable: true,
                                                                maximized: false,
                                                                layout: 'fit',
                                                                items: [
                                                                    grid
                                                                ]                                    
                                                            });

                                                        }
                                                    });                                                    
                                                }
                                            }]
                                        });
                                        selectControlHover.baloon.show();
                                        var cont = mapPanel.getLayout().getElementTarget();
                                        selectControlHover.baloon.alignTo(cont, 'tr-tr?');
                                    }
                                    
                                });
                                
                        var opacitySlider = Ext.create('GeoExt.slider.LayerOpacity',{
                            aggressive: true,
                            vertical: false,
                            inverse: false,
                            width: 'auto',
                            fieldLabel: 'Opacity'
                            //x: 12,
                            //y: 60,
                            //hidden: true
                            , disabled: true
                        });
                        
                        var mapPanel = 
                                Ext.create('GeoExt.panel.Map', {
                                    id: 'bigGextMapPanel' + mapConf,
                                    map: {
                                        allOverlays: false
                                        ,numZoomLevels: 19
                                        //,maxResolution: 78271.516964
                                        //,units: 'm'
                                    }
                                    ,extent: mcfg.extent
                                    ,displayProjection: petroresConfig.projGoog // new OpenLayers.Projection("EPSG:900913")
                                    ,projection: petroresConfig.projGoog //new OpenLayers.Projection("EPSG:900913")
                                    ,layers: layers
                                    ,region: "center"
                                    ,selectControl: selectControl
                                    //,items: [
                                    //    opacitySlider
                                    //]
                                });
                                
                        mapPanel.map.addControl(selectControl);
                        mapPanel.map.addControl(selectControlHover);
                        mapPanel.map.addControl(new OpenLayers.Control.MousePosition({
                            displayProjection: petroresConfig.proj4326
                        }));
                        mapPanel.map.addControl(new OpenLayers.Control.ScaleLine());
                        
                        var store = Ext.create('Ext.data.TreeStore', {
                            model: 'GeoExt.data.LayerTreeModel',
                            storeId: 'BigMapLayers',
                            root: {
                                expanded: true,
                                children: [
                                    {
                                        plugins: [{
                                            ptype: 'gx_overlaylayercontainer'
                                            //,store: mapPanel.layers
                                            ,loader: {
                                                store: mapPanel.layers
                                                , filter: function(rec){
                                                    //console.log(rec.getLayer());
                                                    return !rec.getLayer().isBaseLayer && rec.getLayer().displayInLayerSwitcher == true;
                                                }
                                            }
                                        }],
                                        expanded: true
                                    },
                                    {
                                        plugins: [{
                                            ptype: 'gx_baselayercontainer'
                                            //,store: mapPanel.layers
                                            ,loader: {
                                                store: mapPanel.layers
                                            }
                                        }],
                                        expanded: true
                                    }                             
                                    /*{
                                        plugins: [
                                            {
                                                ptype: 'gx_baselayercontainer',
                                                store: mapPanel.layers
                                            }
                                        ],
                                        expanded: true,
                                        text: "Base Maps"
                                    }, {
                                        plugins: [
                                            {
                                                ptype: 'gx_overlaylayercontainer',
                                                store: mapPanel.layers
                                            }
                                        ],
                                        expanded: true
                                    }*/
                                ]
                            }
                        });
                        
                        var getZippedShapeButton = Ext.create('Ext.button.Button', 
                        {
                            text: 'Get Zipped Shape',
                            handler: function(me){
                                var getFeatureUrl = me.layerToGet.schema.replace
                                ('DescribeFeatureType', 'GetFeature') +
                                    '&outputFormat=shape-zip';
                                //http://playground:9000/geoserver/wfs?
                                //service=WFS&request=GetFeature&version=1.1.0&typeName=
                                //PetroResurs:Structures_PRS
                                //&outputFormat=shape-zip
                                //console.log([me.layerToGet, getFeatureUrl]);
                                window.open(getFeatureUrl, '_blank');
                            }
                        });
                        
                        var layerOutlookPanel = Ext.create('Ext.panel.Panel',
                        {
                            layout: 'anchor',
                            defaults: {
                                anchor: '100%'
                            },
                            collapsible: true,
                            collapsed: true,
                            dock: 'bottom',
                            items: [
                                getZippedShapeButton,
                                opacitySlider
                            ]
                        });

                        var tree = Ext.create('GeoExt.tree.Panel', {
                            viewConfig: {
                                plugins: {
                                    ptype: 'treeviewdragdrop'
                                }
                            },
                            border: true,
                            region: "west",
                            title: "Layers",
                            width: 200,
                            split: true,
                            collapsible: true,
                            collapseMode: "header",
                            autoScroll: true,
                            store: store,
                            rootVisible: false,
                            lines: false,
                            listeners: {
                                itemclick: function(){
                                    //console.log(arguments[1].data.layer);
                                    var layer = arguments[1].data.layer;
                                    tree.psSelectedLayer = layer;
                                    mapPanel.petroLayerToEdit = undefined;
                                    for(var ooo in editableLayers){
                                        if(editableLayers[ooo].val == layer){
                                            layerOutlookPanel.setTitle(layer.name);
                                            layerOutlookPanel.expand();
                                            getZippedShapeButton.layerToGet = layer;
                                            getZippedShapeButton.enable();
                                            opacitySlider.setLayer(layer);
                                            opacitySlider.enable();
                                            
                                            mapPanel.petroLayerToEdit = layer;
                                            /*if(mapPanel.petroEditMode){
                                                for(var lll in editableLayers){
                                                    if(editableLayers[lll].val.editingPanel)
                                                        if(editableLayers[lll].val == mapPanel.petroLayerToEdit){
                                                            editableLayers[lll].val.editingPanel.activate();
                                                            editableLayers[lll].val.editingPanel.div.style.display = 'block';
                                                        }else{
                                                            editableLayers[lll].val.editingPanel.deactivate();
                                                            editableLayers[lll].val.editingPanel.div.style.display = 'none';
                                                        }
                                                }
                                            }*/
                                            break;
                                        }
                                    }

                                    if(mapPanel.petroEditMode && mapPanel.petroLayerToEdit){
                                        for(var lll in editableLayers){
                                            if(editableLayers[lll].val.editingPanel)
                                                if(editableLayers[lll].val == mapPanel.petroLayerToEdit){
                                                    editableLayers[lll].val.editingPanel.activate();
                                                    editableLayers[lll].val.editingPanel.div.style.display = 'block';
                                                }else{
                                                    editableLayers[lll].val.editingPanel.deactivate();
                                                    editableLayers[lll].val.editingPanel.div.style.display = 'none';
                                                }
                                        }
                                    }else if(!mapPanel.petroEditMode ){
                                        for(lll in editableLayers){
                                            if(editableLayers[lll].val.editingPanel){
                                                    editableLayers[lll].val.editingPanel.deactivate();
                                                    editableLayers[lll].val.editingPanel.div.style.display = 'none';
                                            }
                                        }
                                    }

                                    if(mapPanel.petroSearchMode && mapPanel.petroLayerToEdit){
                                        selectControl.activate();
                                        selectControlHover.deactivate();
                                        petroresConfig.showFeatureSearcher(mapPanel.petroLayerToEdit, selectControl);
                                    }

                                }
                            }
                            , dockedItems: [
                                layerOutlookPanel
                            ]
                        });
                        
                        var legendPanel = Ext.create('GeoExt.panel.Legend', {
                            layerStore: mapPanel.layers,
                            title: "Legend",
                            defaults: {
                                labelCls: 'mylabel',
                                style: 'padding:5px'
                            },
                            bodyStyle: 'padding:5px',
                            split: true,
                            collapsible: true,
                            collapseMode: "header",
                            width: 180,
                            autoScroll: true,
                            region: 'east'
                            //preferredTypes: ["Point", "Line", "Polygon"]
                        });                        
                        
                        var printPage;
                        var printProvider = Ext.create('GeoExt.data.MapfishPrintProvider', {
                            url: petroresConfig.mapfishUrl// "form/proxy?url=http://oceanviewer.ru/print/pdf"
                            ,method: 'POST'
                            //capabilities: printCapabilities
                            ,autoLoad: true
                            ,listeners: {
                                "loadcapabilities": function() {
                                    printPage = Ext.create('GeoExt.data.PrintPage', {
                                        printProvider: printProvider
                                        ,customParams: {
                                            
                                            "outputFormat":"jpg",
                                            "outputFilename":"map-print111",
                                            "mapTitle":"Petroresurs",
                                            "comment":"Petroresurs Map"
                                            
                                            //outputFormat:"jpg",
                                            //outputFilename:"map-print"
                                        }
                                    });
                                    Ext.getCmp('pdfButton' + mapConf).setDisabled(false);
                                }
                            }
                             
                        });
                        //printPage = Ext.create('GeoExt.data.PrintPage', {
                        //    printProvider: printProvider
                        //});
                        
                        //var printPage = Ext.create('GeoExt.data.PrintPage', {
                        //    printProvider: printProvider
                        //});                        
                        
                        var tbar = [
                                    {
                                        xtype: 'button',
                                        text: 'Pan',
                                        tooltip: 'Pan',
                                        toggleGroup: 'modeGr',
                                        iconCls: 'petroButtonMapPan',
                                        pressed: true,
                                        toggleHandler: function(th, pressed){
                                            if(pressed){
                                                selectControl.deactivate();
                                                selectControlHover.deactivate();
                                            }
                                        }
                                    },
                                    petroresConfig.userIsEditor || petroresConfig.userIsAdmin ?{
                                        xtype: 'button',
                                        text: 'Edit',
                                        tooltip: 'Edit',
                                        iconCls: 'petroButtonMapEdit',
                                        toggleGroup: 'modeGr',
                                        toggleHandler: function(th, state){
                                            mapPanel.petroEditMode = state;
                                            if(mapPanel.petroEditMode && mapPanel.petroLayerToEdit){
                                                for(var lll in editableLayers){
                                                    if(editableLayers[lll].val.editingPanel)
                                                        if(editableLayers[lll].val == mapPanel.petroLayerToEdit){
                                                            editableLayers[lll].val.editingPanel.activate();
                                                            editableLayers[lll].val.editingPanel.div.style.display = 'block';
                                                        }else{
                                                            editableLayers[lll].val.editingPanel.deactivate();
                                                            editableLayers[lll].val.editingPanel.div.style.display = 'none';
                                                        }
                                                }
                                            }
                                            if(!mapPanel.petroEditMode){
                                                for(lll in editableLayers){
                                                    if(editableLayers[lll].val.editingPanel){
                                                            editableLayers[lll].val.editingPanel.deactivate();
                                                            editableLayers[lll].val.editingPanel.div.style.display = 'none';
                                                    }
                                                }
                                            }
                                        }
                                    }:undefined,
                                    {
                                        xtype: 'button',
                                        text: 'Select',
                                        tooltip: 'Select',
                                        iconCls: 'petroButtonMapSelect',
                                        toggleGroup: 'modeGr',
                                        toggleHandler: function (th, state){
                                            if(state){
                                                selectControl.activate();
                                                selectControlHover.deactivate();
                                            }else{
                                                selectControl.deactivate();
                                            }
                                        }
                                    },
                                    {
                                        xtype: 'button',
                                        text: 'Search',
                                        icon: 'images/search.png',
                                        tooltip: 'Search',
                                        toggleGroup: 'modeGr'
                                        , listeners: {
                                            menushow: function(th){
                                                th.toggle(true);
                                                //return false;// !mapPanel.petroSearchMode;
                                            }
                                        }
                                        ,toggleHandler: function (th, pressed){
                                            if(!pressed){
                                                mapPanel.petroSearchMode = false;
                                                selectControl.deactivate();
                                                th.menu.items.each(function(itm){itm.setChecked(false)});
                                            }
                                        }
                                        /*,toggleHandler: function (th, pressed){
                                            //mapPanel.petroSearchMode = pressed;
                                            if(pressed){// && mapPanel.petroLayerToEdit){
                                                selectControl.activate();
                                                selectControlHover.deactivate();
                                                //petroresConfig.showFeatureSearcher(mapPanel.petroLayerToEdit, selectControl);
                                            }else if(!pressed){
                                                selectControl.deactivate();
                                            }
                                        }*/
                                        , menu: [
                                            {
                                                xtype: 'menucheckitem'
                                                ,text: 'Any'
                                                ,group: 'searchType'
                                                ,handler: function (){
                                                    selectControl.activate();
                                                    selectControlHover.deactivate();
                                                    Ext.Msg.prompt('Simple Search', 'Search for Attribute Value'
                                                    , function(btn, text){
                                                        text = text.toLowerCase();
                                                        if(btn=='ok'){
                                                            
                                                            var bounds = new OpenLayers.Bounds();
                                                            var foundSome = false;
                                                            for(var lay in layers){
                                                                var layer = layers[lay];
                                                                if(!layer.features)
                                                                    continue;
                                                                
                                                                midLoop:
                                                                for(var featr in layer.features){
                                                                    for(var attr in layer.features[featr].attributes){
                                                                        var comp = layer.features[featr].attributes[attr];
                                                                        if(comp.toLowerCase){
                                                                            comp = comp.toLowerCase();
                                                                        }
                                                                        if(comp.indexOf(text)>=0){
                                                                            selectControl.select(layer.features[featr]);
                                                                            bounds.extend(layer.features[featr].geometry.getBounds());
                                                                            foundSome = true;
                                                                            continue midLoop;
                                                                        }
                                                                    } 
                                                                }
                                                            }
                                                            if(foundSome){
                                                                layers[0].map.zoomToExtent(bounds);
                                                            }
                                                                
                                                        }
                                                    });
                                                }
                                            }
                                            ,{
                                                xtype: 'menucheckitem'
                                                ,text: 'By Attribute'
                                                , group: 'searchType'
                                                , listeners: {
                                                    checkchange: function(th, checked){
                                                        mapPanel.petroSearchMode = checked;
                                                        if(checked){
                                                            selectControl.activate();
                                                            selectControlHover.deactivate();
                                                            if(mapPanel.petroSearchMode && mapPanel.petroLayerToEdit && checked){
                                                                petroresConfig.showFeatureSearcher(mapPanel.petroLayerToEdit, selectControl);
                                                            }
                                                        }else{
                                                            selectControl.deactivate();
                                                        }
                                                    }
                                                }
                                            }
                                            
                                        ]
                                        
                                    },
                                    {
                                        xtype: 'button',
                                        text: 'Info',
                                        tooltip: 'Info',
                                        iconCls: 'petroButtonMapInfo',
                                        toggleGroup: 'modeGr',
                                        toggleHandler: function (th, pressed){
                                            if(pressed){
                                                selectControl.deactivate();
                                                selectControlHover.activate();
                                            }else{
                                                selectControlHover.deactivate();
                                            }
                                        }
                                        
                                    },
                                    '-', 
                                    {
                                        xtype: 'button',
                                        tooltip: 'Find documents for selected objects',
                                        text: 'Find Documents',
                                        iconCls: 'petroButtonMapFindDocs',
                                        handler: function(){
                                            Ext.Ajax.request({
                                                headers: {
                                                    Accept: 'application/json'
                                                },
                                                url: 'rest/documents/find',
                                                jsonData: {geoObjects: function(){
                                                    var obj = [];
                                                    for(var feat in wnd.openPetroWindows['geMapWindow' + mapConf].selectedFeatures){
                                                        var oneFeatArr = feat.split('.');
                                                        obj.push({
                                                            idInTable: oneFeatArr[1],
                                                            tableName: oneFeatArr[0]
                                                        });
                                                    }
                                                    return obj;// Ext.encode(obj);
                                                }.call()}
                                                ,
                                                success: function(resp, opts){
                                                    var ret = Ext.decode(resp.responseText);
                                                    //petroresConfig.makeAllIdsNumbers(ret);
                                                    //console.log(["вот, получилось", ret])
                                                    
                                                    var wnd = Ext.getCmp('MainWindow');

                                                    var stor = Ext.create('Ext.data.Store', {
                                                        model: Ext.getStore('DocumentsJsonStore').getProxy().getModel(),
                                                        data: ret,
                                                        proxy: {
                                                            type: 'memory',
                                                            reader: {
                                                                type: 'json',
                                                                root: 'documents'
                                                            }
                                                        }
                                                    });
                                                    var grid = Ext.create(
                                                        'PetroRes.view.DocumentsGridPanel', 
                                                        {
                                                            store: stor,
                                                            listeners:{
                                                                itemdblclick: function(ths, rec){

                                                                    var editForm = Ext.create(
                                                                            'PetroRes.view.DocumentFormEdit'
                                                                        );
                                                                    wnd.openPetroWindow('editDoc', {
                                                                        closable: true,
                                                                        width:wnd.getWidth()*0.9,
                                                                        title: 'Edit Document',
                                                                        maximizable: true,
                                                                        maximized: true,
                                                                        layout: 'fit',
                                                                        items: [
                                                                            editForm
                                                                        ]                                    
                                                                    });
                                                                    editForm.loadRecord(rec);
                                                                }
                                                            }
                                                        }
                                                    );
                                                    if(wnd.openPetroWindows.searchres){
                                                        wnd.openPetroWindows.searchres.close();
                                                    }
                                                    wnd.openPetroWindow('searchres', {
                                                        closable: true,
                                                        width:wnd.getWidth()*0.9,
                                                        title: 'Found Documents',
                                                        maximizable: true,
                                                        maximized: false,
                                                        layout: 'fit',
                                                        items: [
                                                            grid
                                                        ]                                    
                                                    });

                                                }
                                            });
                                        }                                        
                                    },
                                    '-', 
                                    
                                    
                                    
                                    //'Measure: '
                                    ,{
                                        xtype: 'button',
                                        text: 'Measure',
                                        icon: 'images/distance.png',
                                        menu: [
                                            Ext.create('Ext.menu.CheckItem', Ext.create('GeoExt.Action', {
                                                //group: 'modeGr1',
                                                iconCls: 'petroButtonMapDistance',
                                                tooltip: 'Distance',
                                                text: 'Distance',
                                                id: 'measureDistanceCheck' + mapConf,
                                                activateOnEnable: true,
                                                deactivateOnDisable: true,
                                                control: new OpenLayers.Control.Measure(OpenLayers.Handler.Path, {
                                                    displayInLayerSwitcher: false,
                                                    geodesic: true,
                                                    eventListeners: {
                                                        activate: function(){
                                                            Ext.getCmp('measureAreaCheck' + mapConf).setChecked(false);
                                                        },
                                                        measure: function(evt) {
                                                            Ext.Msg.alert('Distance',
                                                                'The distance is ' + evt.measure.toFixed(2) + ' '+ evt.units);
                                                        }
                                                    }                                        
                                                }),
                                                map: mapPanel.map
                                            }))
                                            , Ext.create('Ext.menu.CheckItem', Ext.create('GeoExt.Action', {
                                                //group: 'modeGr1',
                                                text: 'Area',
                                                tooltip: 'Area',
                                                iconCls: 'petroButtonMapArea',
                                                activateOnEnable: true,
                                                id: 'measureAreaCheck' + mapConf,
                                                deactivateOnDisable: true,
                                                control: new OpenLayers.Control.Measure(OpenLayers.Handler.Polygon, {
                                                    displayInLayerSwitcher: false,
                                                    geodesic: true,
                                                    eventListeners: {
                                                        activate: function(){
                                                            Ext.getCmp('measureDistanceCheck' + mapConf).setChecked(false);
                                                        },
                                                        measure: function(evt) {
                                                            Ext.Msg.alert('Area',
                                                                'The area is ' + + evt.measure.toFixed(2) + ' '+ evt.units + '<sup>2</sup>');
                                                            //alert("The area is " + evt.measure + evt.units);
                                                        }
                                                    }                                        
                                                }),
                                                map: mapPanel.map,
                                                listeners:{
                                                    enable: function(){
                                                        Ext.getCmp('measureDistanceCheck' + mapConf).disable();
                                                    }
                                                }
                                            }))                                    
                                        ]
                                    }
                                    , Ext.create('Ext.button.Button', {
                                        tooltip: 'Download map in different formats',
                                        text: 'Print',
                                        iconCls: 'petroButtonMapPdf',
                                        disabled: true,
                                        id: 'pdfButton' + mapConf,
                                        handler: function() {
                                            var printWnd;
                                            var form = Ext.create('Ext.form.Panel', {
                                                layout: 'anchor',
                                                defaults: {
                                                    anchor: '100%',
                                                    padding: 5
                                                },
                                                autoScroll: true,
                                                items: [{
                                                    xtype: "textfield",
                                                    name: "mapTitle", // printPage.customParams.mapTitle
                                                    fieldLabel: "Map Title",
                                                    value: "Petroresurs",
                                                    plugins: Ext.create('GeoExt.plugins.PrintPageField', {
                                                        printPage: printPage
                                                    })
                                                }, {
                                                    xtype: "textfield",
                                                    name: "comment", // printPage.customParams.mapTitle
                                                    fieldLabel: "Map Comment",
                                                    value: "Petroresurs Map",
                                                    plugins: Ext.create('GeoExt.plugins.PrintPageField', {
                                                        printPage: printPage
                                                    })
                                                }, {
                                                    xtype: "combo",
                                                    displayField: "name",
                                                    store: printProvider.layouts, // printPage.scale
                                                    name: "layout",
                                                    fieldLabel: "Layout",
                                                    typeAhead: true,
                                                    queryMode: "local",
                                                    forceSelection: true,
                                                    triggerAction: "all",
                                                    selectOnFocus: true,
                                                    plugins: Ext.create('GeoExt.plugins.PrintProviderField', {
                                                        printProvider: printProvider
                                                    }),
                                                    listeners: {
                                                        select: function(th, recs){
                                                            var cm = Ext.getCmp('dpiPrintCombo');
                                                            if(recs[0].data.name.indexOf('A1')>=0){
                                                                cm.store.removeAll();
                                                                cm.store.loadData([[72], [96]]);
                                                                cm.setValue([96]);
                                                            }else if(recs[0].data.name.indexOf('A2')>=0){
                                                                cm.store.removeAll();
                                                                cm.store.loadData([[72], [96], [150]]);
                                                                cm.setValue([150]);
                                                            }else {
                                                                cm.store.removeAll();
                                                                cm.store.loadData([[72], [96], [150], [300]]);
                                                                cm.setValue([300]);
                                                            }
                                                        }
                                                    }
                                                }, {
                                                    xtype: "combo",
                                                    displayField: "value",
                                                    id: 'dpiPrintCombo',
                                                    store: Ext.create('Ext.data.ArrayStore', {
                                                        data: [
                                                            [72],
                                                            [96],
                                                            [150],
                                                            [300]
                                                        ],
                                                        fields: ['value']
                                                    }),
                                                    name: "dpi",
                                                    fieldLabel: "DPI",
                                                    typeAhead: true,
                                                    queryMode: "local",
                                                    forceSelection: true,
                                                    triggerAction: "all",
                                                    selectOnFocus: true,
                                                    value: 96,
                                                    listeners: {
                                                        afterrender: function(th){
                                                            printProvider.setDpi(th.store.getAt(1));
                                                        },
                                                        select: function(th, recs){
                                                            if(recs.length>0)
                                                                printProvider.setDpi(recs[0]);
                                                        }
                                                    }
                                                }, {
                                                    xtype: "combo",
                                                    displayField: "name",
                                                    store: printProvider.outputFormats, // printPage.scale
                                                    name: "outputFormat",
                                                    fieldLabel: "Format",
                                                    typeAhead: true,
                                                    queryMode: "local",
                                                    forceSelection: true,
                                                    triggerAction: "all",
                                                    selectOnFocus: true,
                                                    value: 'pdf',
                                                    plugins: Ext.create('GeoExt.plugins.PrintProviderField', {
                                                        printProvider: printProvider
                                                    })
                                                }],
                                                buttons: [
                                                    {
                                                        text: 'Make Print Page',
                                                        handler: function(){
                                                            printPage.fit(mapPanel, true);
                                                            printProvider.print(mapPanel, printPage);
                                                        }
                                                    }                                            
                                                ]
                                            });
                                            printWnd = Ext.create('Ext.window.Window', {
                                                closable: true,
                                                title: 'Print Configuration',
                                                maximizable: false,
                                                maximized: false,
                                                width: 500,
                                                layout: 'fit',
                                                items: [
                                                    form
                                                ]
                                            });
                                            printWnd.show();
                                        }
                                    }),
                                    petroresConfig.userIsAdmin ?'-':undefined, 
                                    !petroresConfig.userIsAdmin ?undefined:{
                                        xtype: 'button',
                                        text: 'Save Map',
                                        tooltip: 'Save map configuration',
                                        iconCls: 'petroButtonMapSaveConf',
                                        handler: function (){
                                            
                                            var conf =petroresConfig.layersSaver(mapPanel.map);
                                            var encodedMapName = /*encodeURIComponent(*/mapConf/*)*/;
                                            conf = Ext.JSON.encode(conf);
                                            //console.log(conf);
                                            Ext.Ajax.request({
                                                url: 'form/maps/' + (mapConf===''?petroresConfig.defaultMap:encodedMapName + '.json'),
                                                method: 'PUT',
                                                jsonData: conf,
                                                success: function(){
                                                    petroresConfig.mapConfigs[(mapConf===''?petroresConfig.defaultMap:mapConf)] = Ext.JSON.decode(conf);
                                                    if(mapConf===''){
                                                        petroresConfig.layersConfig = petroresConfig.mapConfigs[petroresConfig.defaultMap];
                                                    }
                                                    Ext.Msg.alert('Status', 'Map configuration saved successfully');
                                                },
                                                failure: function(){
                                                    Ext.Msg.alert('Status', 'Could not save map configuration');
                                                }
                                            });
                                        }
                                        
                                    }
                                    ,!petroresConfig.userIsAdmin ?undefined:{
                                        xtype: 'button',
                                        text: 'Save Map As',
                                        tooltip: 'Save map configuration',
                                        iconCls: 'petroButtonMapSaveConf',
                                        handler: function (){
                                            
                                            Ext.Msg.prompt('Save As', 'Enter Map Name'
                                            , function(btn, text){
                                                if(btn==='ok'){
                                                    var textNoEnc = text;
                                                    if(text!='')text = /*encodeURIComponent(*/textNoEnc/*)*/;
                                                    var conf =petroresConfig.layersSaver(mapPanel.map);
                                                    conf = Ext.JSON.encode(conf);
                                                    //console.log(conf);
                                                    Ext.Ajax.request({
                                                        url: 'form/maps/' + (text===''?petroresConfig.defaultMap:text + '.json'),
                                                        method: 'PUT',
                                                        jsonData: conf,
                                                        success: function(){
                                                            petroresConfig.mapConfigs[(text===''?petroresConfig.defaultMap:textNoEnc)] = Ext.JSON.decode(conf);
                                                            if(text===''){
                                                                petroresConfig.layersConfig = petroresConfig.mapConfigs[petroresConfig.defaultMap];
                                                            }
                                                            var menuMaps = Ext.getCmp('mapMenus');
                                                            menuMaps.removeAll();
                                                            menuMaps.add(petroresConfig.getMapMenus());
                                                            Ext.Msg.alert('Status', 'Map configuration saved successfully');
                                                        },
                                                        failure: function(){
                                                            Ext.Msg.alert('Status', 'Could not save map configuration');
                                                        }
                                                    });
                                                }
                                            }, undefined, undefined, mapConf);
                                        }
                                        
                                    }
                                    ,!petroresConfig.userIsAdmin ?undefined:{
                                        xtype: 'button',
                                        text: 'Add Layer',
                                        icon: 'lib/ext41/resources/themes/images/default/dd/drop-add.gif',
                                        menu: [
                                            {
                                                xtype: 'menuitem'
                                                ,text: 'Base Layer'
                                                ,handler: function (){
                                                    var addLayWnd;
                                                    var form = Ext.create('Ext.form.Panel', {
                                                        layout: 'anchor',
                                                        defaults: {
                                                            anchor: '100%',
                                                            padding: 5
                                                        },
                                                        autoScroll: true,
                                                        items: [
                                                            {
                                                                xtype: 'textfield',
                                                                fieldLabel: 'Name',
                                                                name: 'name'
                                                            },
                                                            {
                                                                xtype: 'textfield',
                                                                fieldLabel: 'URL',
                                                                name: 'url'
                                                            },
                                                            {
                                                                xtype: 'textfield',
                                                                fieldLabel: 'Layer(s)',
                                                                name: 'layers'
                                                            }
                                                        ],
                                                        buttons: [
                                                            {
                                                                text: 'Add',
                                                                handler: function(){
                                                                    var attrs = form.getForm().getFieldValues(true);
                                                                    mapPanel.map.addLayer(new OpenLayers.Layer.WMS(
                                                                        attrs.name, 
                                                                        attrs.url, 
                                                                        {
                                                                            layers: attrs.layers
                                                                        }, {
                                                                            transitionEffect: 'resize',
                                                                            projection: petroresConfig.projGoog//'EPSG:900913'
                                                                        })
                                                                    );
                                                                    addLayWnd.close();
                                                            }
                                                            }                                            
                                                        ]
                                                    });
                                                    addLayWnd = Ext.create('Ext.window.Window', {
                                                        closable: true,
                                                        title: 'Add Base Layer',
                                                        maximizable: false,
                                                        maximized: false,
                                                        width: 500,
                                                        layout: 'fit',
                                                        items: [
                                                            form
                                                        ]
                                                    });
                                                    addLayWnd.show();
                                                }
                                            }
                                            ,{
                                                xtype: 'menuitem'
                                                ,text: 'Info Layer'
                                                ,handler: function (){
                                                    var addOverLayWnd;
                                                    var form = Ext.create('Ext.form.Panel', {
                                                        layout: 'anchor',
                                                        defaults: {
                                                            anchor: '100%',
                                                            padding: 5
                                                        },
                                                        autoScroll: true,
                                                        items: [
                                                            {
                                                                xtype: 'textfield',
                                                                fieldLabel: 'Name',
                                                                name: 'name'
                                                            },
                                                            {
                                                                xtype: 'textfield',
                                                                fieldLabel: 'Layer',
                                                                name: 'layer'
                                                            },
                                                            {
                                                                xtype: 'combo',
                                                                fieldLabel: 'Type',
                                                                name: 'type',
                                                                store: {
                                                                    xtype: 'store',
                                                                    fields: ['Type', 'code'],
                                                                    data: [
                                                                        {Type: 'Point', code: 'point'},
                                                                        {Type: 'Polygon', code: 'poly'},
                                                                        {Type: 'Line', code: 'line'}
                                                                    ]
                                                                },
                                                                queryMode: 'local',
                                                                displayField: 'Type',
                                                                valueField: 'code'
                                                            }
                                                        ],
                                                        buttons: [
                                                            {
                                                                text: 'Add',
                                                                handler: function(){
                                                                    var attrs = form.getForm().getFieldValues(true);
                                                                    
                                                                    var layer = new OpenLayers.Layer.Vector(attrs.name, {
                                                                        psLayerType: attrs.type,
                                                                        isBaseLayer: false,
                                                                        visibility: true,
                                                                        defaultLabelField: petroresConfig.defaultWfsLabelField,
                                                                        defaultIdField: petroresConfig.defaultWfsIdField,
                                                                        strategies: [new OpenLayers.Strategy.Fixed(), petroresConfig.makeSaveStrategy()],
                                                                        protocol: new OpenLayers.Protocol.WFS({
                                                                            url: petroresConfig.vectorWfs,
                                                                            featureType: attrs.layer,
                                                                            featureNS: petroresConfig.defaultWfsFeatureNS,
                                                                            geometryName: "GEOM"
                                                                        })
                                                                        ,schema: petroresConfig.vectorWfs + 
                                                                            "/DescribeFeatureType?version=1.1.0&typename="+
                                                                            petroresConfig.defaultWfsFeatureNSShort+":" + 
                                                                            attrs.layer
                                                                        ,projection: new OpenLayers.Projection("EPSG:32639")
                                                                        ,version: "1.1.0"
                                                                        , eventListeners: {
                                                                            beforefeaturesadded: function(obj){
                                                                                petroresConfig.showFeatureEditor(obj.object, obj.features)
                                                                            },
                                                                            beforefeaturemodified: function(obj){
                                                                                obj.feature.state = OpenLayers.State.UPDATE;
                                                                                petroresConfig.showFeatureEditor(obj.object, [obj.feature]);
                                                                            },
                                                                            loadend: function(eventsObj){
                                                                                petroresConfig.loadWfsSchema(eventsObj.object);
                                                                                petroresConfig.createEditingPanel(eventsObj.object)
                                                                            },
                                                                            featureselected: function(sel) {
                                                                                wnd.openPetroWindows['geMapWindow' + mapConf].selectedFeatures[sel.feature.fid] = sel.feature;
                                                                                //console.log(wnd.openPetroWindows.mapWindow.selectedFeatures);
                                                                            },
                                                                            featureunselected: function(sel) {
                                                                                delete wnd.openPetroWindows['geMapWindow' + mapConf].selectedFeatures[sel.feature.fid];
                                                                                //console.log(wnd.openPetroWindows.mapWindow.selectedFeatures);
                                                                            }
                                                                        }
                                                                    });                                                                    
                                                                    
                                                                    mapPanel.map.addLayer(layer);
                                                                    //editableLayers.push(layer);
                                                                    editableLayers.push({
                                                                        name: layer.name,
                                                                        val: layer
                                                                    });
                                                                    addOverLayWnd.close();
                                                                    
                                                                }
                                                            }                                            
                                                        ]
                                                    });
                                                    addOverLayWnd = Ext.create('Ext.window.Window', {
                                                        closable: true,
                                                        title: 'Add Info Layer',
                                                        maximizable: false,
                                                        maximized: false,
                                                        width: 500,
                                                        layout: 'fit',
                                                        items: [
                                                            form
                                                        ]
                                                    });
                                                    addOverLayWnd.show();
                                                }
                                            }
                                        ]
                                    }
                                    ,!petroresConfig.userIsAdmin ?undefined:{
                                        xtype: 'button',
                                        text: 'Remove Layer',
                                        icon: 'lib/ext41/examples/restful/images/delete.png',
                                        handler: function (){
                                            if(tree.psSelectedLayer){
                                                Ext.MessageBox.confirm('Confirm', 
                                                'Are you sure to delete the layer from map?',
                                                function(btn){
                                                    if(btn==='yes'){
                                                        mapPanel.map.removeLayer(tree.psSelectedLayer);
                                                    }
                                                });
                                            }else{
                                                Ext.MessageBox.show({
                                                    msg: 'Select a layer in the layer tree',
                                                    buttons: Ext.Msg.OK
                                                });
                                            }
                                        }
                                    }
                                ];                        
                        var wnd = Ext.getCmp('MainWindow');
                        wnd.openPetroWindow('geMapWindow' + mapConf, {
                            closable: true,
                            title: mapConf===''?'Caspian Sea':mapConf,
                            maximizable: true,
                            maximized: false,
                            id: 'geMapWindow' + mapConf,
                            height:wnd.getLayout().getRenderTarget().getHeight(),
                            width:wnd.getLayout().getRenderTarget().getWidth()*0.666,
                            y: 0,
                            x: wnd.getLayout().getRenderTarget().getWidth()*0.334,
                            layout: 'border',
                            selectedFeatures: {},
                            items: [
                                mapPanel, 
                                tree,
                                legendPanel
                            ],
                            tbar: tbar
                        });
                    }
});
