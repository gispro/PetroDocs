/*
 * File: app/view/TypesGridPanel.js
 * Date: Fri Jan 20 2012 16:35:08 GMT+0400 (Ìîñêîâñêîå âðåìÿ (çèìà))
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('PetroRes.view.TypesGridPanel', {
    extend: 'PetroRes.view.ui.TypesGridPanel',

    initComponent: function() {
        var me = this;
        me.callParent(arguments);
        
        var proxy = me.store.getProxy();
        
        Ext.apply(proxy.actionMethods, {
            update: 'PUT',
            create: 'POST',
            destroy: 'DELETE'
        });
        
        me.addButton = me.dockedItems.getByKey('pagingToolBar').items.getByKey('addButton')
        
        me.headerCt.insert(0, {
            xtype:'actioncolumn',
            flex:1,
            items: [{
                icon: 'lib/ext41/examples/restful/images/delete.png',
                tooltip: 'Delete',
                handler: function(grid, rowIndex, colIndex) {
                    grid.store.removeAt(rowIndex);
                }
            }]
        });
        
        me.headerCt.add({
            xtype: 'templatecolumn',
            flex: 13,
            tpl: Ext.create('Ext.XTemplate', 
                '<tpl if="typeExt">',
                '<tpl if="Ext.isArray(typeExt)">',
                '<tpl for="typeExt">',
                '{ext.ext} ',
                '</tpl>',
                '</tpl><tpl if="!Ext.isArray(typeExt)">',
                '{typeExt.ext.ext}',
                '</tpl>',
                '</tpl>'
                ),
            dataIndex: 'typeExt',
            editor: {
                xtype: 'pickerfield',
                rawValueTpl: Ext.create('Ext.XTemplate', 
                        '<tpl if="typeExt">',
                        '<tpl for="typeExt">',
                        '{ext.ext} ',
                        '</tpl>',
                        '</tpl>'
                    ),
                editable: true,
                matchFieldWidth: false,
                collapseIf: function(e){
                    var TypeExtsCombo = Ext.getCmp('TypeExtsCombo');
                    var me = this;
                    if (!me.isDestroyed && !e.within(me.bodyEl, false, true) && !e.within(me.picker.el, false, true)) {
                        if(TypeExtsCombo){
                            if(!TypeExtsCombo.isDestroyed && !e.within(TypeExtsCombo.bodyEl, false, true) && !e.within(TypeExtsCombo.picker.el, false, true))
                                me.collapse();
                        }else{
                                me.collapse();
                        }
                    }
                },
                rememberDataDeleted: {},
                valueToRaw: function(data){
                    if(data){
                        if(!Ext.isArray(data))
                            data = [data];
                        this.rememberData = data;
                        var obj = {typeExt: data};
                        var ret = this.rawValueTpl.apply(obj);
                        return ret;
                    }else{
                        this.rememberData = [];
                        return '';
                    }
                },
                rawToValue: function(){
                    var text = this.getRawValue();
                    var exts = text.split(' ');
                    var found = false;
                    for(var curExt = 0; curExt<exts.length; curExt++){
                        if(exts[curExt] != ''){
                            for(var dat in this.rememberData){
                                if (exts[curExt] == this.rememberData[dat].ext.ext){
                                    found = true;
                                    this.rememberData[dat].IWASFOUND = true;
                                    break;
                                }
                            }
                            if(!found){
                                if(this.rememberDataDeleted[exts[curExt]]){
                                    this.rememberDataDeleted[exts[curExt]].IWASFOUND = true;
                                    this.rememberData.push(this.rememberDataDeleted[exts[curExt]]);
                                    delete this.rememberDataDeleted[exts[curExt]];
                                }else{
                                    this.rememberData.push({ext:{ext:exts[curExt]},IWASFOUND:true});
                                }
                            }
                            found = false;
                        }
                    }
                    for(dat in this.rememberData){
                        if(!this.rememberData[dat].IWASFOUND){
                            this.rememberDataDeleted[this.rememberData[dat].ext.ext] = this.rememberData[dat];
                            this.rememberData.splice(dat, 1);
                            dat--;
                            //delete this.rememberData[dat];
                        }else{
                            delete this.rememberData[dat].IWASFOUND;
                        }
                    }
                    //console.log(this.rememberData);
                    //this.setValue(this.rememberData)
                    
                    //console.log(this);
                    return this.rememberData;
                },                
                getPicker: function() {
                    var pick = this.picker || (this.picker = this.createPicker());
                    var data = this.rememberData;
                    pick.items.getAt(0).store.loadData(data);
                    return pick;
                },
                createPicker: function() {
                    return Ext.create("Ext.Window",{
                        title : 'Extensions for Types',
                        pickerField: this,
                        width : 450,    
                        height: 250,
                        closable : false,                           
                        modal : true,
                        layout: 'fit',
                        items: [
                        {
                            xtype: 'gridpanel',
                            plugins: [
                            Ext.create('Ext.grid.plugin.RowEditing', {
                                listeners: {
                                    canceledit: function(){
                                        if(this.startedPetroObjectAdd){
                                            this.grid.store.removeAt(0);
                                            this.startedPetroObjectAdd = false;
                                        }
                                    }
                                }
                            }
                            )
                            ],
                            store: {
                                fields: [
                                {
                                    name: 'id'
                                },
                                {
                                    name: 'ext'
                                },
                                {
                                    name: 'isMain'
                                },
                                {
                                    name: 'maxCount'
                                },
                                {
                                    name: 'minCount'
                                },
                                {
                                    name: 'mimeType'
                                }
                                ]
                            },
                            columns: [
                            {
                                xtype: 'templatecolumn',
                                tpl: Ext.create('Ext.XTemplate', 
                                    '{ext.ext}'
                                    ),
                                text: 'Ext',
                                dataIndex: 'ext',
                                editor: {
                                    xtype: 'combo',
                                    store: 'ExtsJsonStore',
                                    displayField: 'ext',
                                    valueField: 'ext',
                                    valueNotFoundText: 'YyyY',
                                    id: 'TypeExtsCombo',
                                    listeners: {
                                        select: function(a, b){
                                            this.value=b[0].data;
                                        },
                                        blur: function(){
                                            if(this.value==null && this.rawValue!=null){
                                                this.setValue({ext:this.rawValue});
                                            }
                                            //console.log(arguments);
                                        }
                                    }
                                }
                            },                                
                            {
                                xtype: 'booleancolumn',
                                dataIndex: 'isMain',
                                editor: 'checkbox',
                                flex: 20,
                                text: 'Main'
                            },
                            {
                                xtype: 'gridcolumn',
                                dataIndex: 'maxCount',
                                editor: 'numberfield',
                                text: 'Max'
                            },
                            {
                                xtype: 'gridcolumn',
                                dataIndex: 'minCount',
                                editor: 'numberfield',
                                text: 'Min'
                            },
                            {
                                xtype: 'gridcolumn',
                                dataIndex: 'mimeType',
                                editor: 'textfield',
                                text: 'Mime Type'
                            }
                            ]
                        }],
                        fbar: [
                        {
                            xtype: 'button',
                            itemId: 'addButton',
                            text: 'Add',
                            listeners: {
                                click: function(){
                                    var editorPlugin = this.ownerCt.ownerCt.items.getAt(0).editingPlugin;
                                    var store = this.ownerCt.ownerCt.items.getAt(0).store;
                                    editorPlugin.cancelEdit();
                                    //store.autoSync = false;
                                    store.insert(0, {});
                                    editorPlugin.startedPetroObjectAdd = true;
                                    editorPlugin.startEdit(0, 0);            
                                }                                    
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'selectButton',
                            text: 'Save',
                            listeners: {
                                click: function(){
                                    var store = this.ownerCt.ownerCt.items.getAt(0).store;
                                    var newData = Ext.pluck(store.data.items, 'data');
                                    this.ownerCt.ownerCt.pickerField.setValue(newData);
                                    this.ownerCt.ownerCt.pickerField.fireEvent('select', this.ownerCt.pickerField, arguments);
                                    this.ownerCt.ownerCt.pickerField.collapse();
                                }                                    
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'cancelButton',
                            text: 'Cancel',
                            listeners: {
                                click: function(){
                                    this.ownerCt.ownerCt.pickerField.collapse();
                                }                                    
                            }
                        }
                        ]
                    });//.show();                                
                }
            },
            text: 'File types'
        }
        );

        for (var i in me.plugins){
            //alert();
            if(me.plugins[i]['$className']==='Ext.grid.plugin.RowEditing'){
                me.editorPlugin = me.plugins[i];
                me.editorPlugin.on('canceledit', function(){
                    if(me.editorPlugin.startedPetroObjectAdd == true){
                        me.store.autoSync = false;
                        me.editorPlugin.startedPetroObjectAdd = false;
                        me.store.removeAt(0);
                        me.store.autoSync = true;
                    }
                });
                me.addButton.on('click', function(){
                    me.editorPlugin.cancelEdit();
                    me.store.autoSync = false;
                    me.store.insert(0, {});
                    me.editorPlugin.startEdit(0, 0);            
                    me.editorPlugin.startedPetroObjectAdd = true;            
                    me.store.autoSync = true;
                });
                
                break;
            }
        }
    }
});
